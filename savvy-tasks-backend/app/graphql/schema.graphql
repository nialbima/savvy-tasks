"""
Autogenerated input type of CreateTask
"""
input CreateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  taskInput: TaskInput!
}

"""
Autogenerated return type of CreateTask.
"""
type CreateTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  task: Task!
}

"""
Autogenerated input type of DeleteTask
"""
input DeleteTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteTask.
"""
type DeleteTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  discardedAt: ISO8601DateTime
  id: ID
  task: Task
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  """
  Creates a new task
  """
  createTask(
    """
    Parameters for CreateTask
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """
  Deletes a task by ID
  """
  deleteTask(
    """
    Parameters for DeleteTask
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """
  Updates a task by id
  """
  updateTask(
    """
    Parameters for UpdateTask
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  task(id: ID!): Task
  user(id: ID!): User
}

type Task implements Node {
  completed: Boolean!

  """
  Creates a new task
  """
  createTask(
    """
    Parameters for CreateTask
    """
    input: CreateTaskInput!
  ): CreateTaskPayload
  createdAt: ISO8601DateTime!

  """
  Deletes a task by ID
  """
  deleteTask(
    """
    Parameters for DeleteTask
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload
  description: String
  discardedAt: ISO8601DateTime!
  dueDate: ISO8601DateTime

  """
  ID of the object.
  """
  id: ID!
  title: String!

  """
  Updates a task by id
  """
  updateTask(
    """
    Parameters for UpdateTask
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload
  updatedAt: ISO8601DateTime!
  user: User
}

"""
The connection type for Task.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]

  """
  A list of nodes.
  """
  nodes: [Task]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TaskEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Task
}

input TaskInput {
  completed: Boolean
  createdAt: ISO8601DateTime
  description: String
  dueDate: ISO8601DateTime
  id: ID
  title: String
  updatedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateTask
"""
input UpdateTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  taskInput: TaskInput!
}

"""
Autogenerated return type of UpdateTask.
"""
type UpdateTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  task: Task!
}

type User implements Node {
  activeTasksCount: Int!
  email: String

  """
  ID of the object.
  """
  id: ID!
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaskConnection!
  username: String
}
